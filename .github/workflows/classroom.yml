name: GitHub Classroom Workflow

on: [push]

jobs:
  build-linux:
    permissions: write-all
    name: Autograding
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'
    - name: Add conda to system path
      run: |
        # $CONDA is an environment variable pointing to the root of the miniconda directory
        echo $CONDA/bin >> $GITHUB_PATH
    - name: Set pythonpath to get our assignment modules
      run: |
         echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV
    - name: Install dependencies
      run: |
        conda env update --file environment.yml --name base

    - name: Show Python versions
      id: show-python-versions
      uses: etamu-class/autograding-command-grader@v10
      with:
        test-name: 'Show Python versions'
        setup-command: ''
        command: 'python src/python_versions.py'
        timeout: '10'
        max-score: '0'

    - name: Test Assignment Notebook runs all cells cleanly
      id: test-assignment-notebook
      uses: etamu-class/autograding-command-grader@v10
      with:
        test-name: 'Test Assignment Notebook'
        working-directory: './notebooks'
        setup-command: ''
        command: 'jupyter nbconvert --execute Assg-02-Scikit-Learn-statsmodel.ipynb --to notebook'
        timeout: '10'
        max-score: '20'

    - name: Test Task 1.1 sklearn_linear_regression()
      id: test-task-1-1
      uses: etamu-class/autograding-command-grader@v10
      with:
        test-name: 'Test Task 1.1'
        setup-command: ''
        command: 'python -m twisted.trial test_assg_tasks.test_task1_sklearn_linear_regression'
        timeout: '10'
        max-score: '10'

    - name: Test Task 1.2 statsmodel_linear_regression()
      id: test-task-1-2
      uses: etamu-class/autograding-command-grader@v10
      with:
        test-name: 'Test Task 1.2'
        setup-command: ''
        command: 'python -m twisted.trial test_assg_tasks.test_task1_statsmodel_linear_regression'
        timeout: '10'
        max-score: '10'

    - name: Test Task 2.1 label_encoding()
      id: test-task-2-1
      uses: etamu-class/autograding-command-grader@v10
      with:
        test-name: 'Test Task 2.1'
        setup-command: ''
        command: 'python -m twisted.trial test_assg_tasks.test_task2_label_encoding'
        timeout: '10'
        max-score: '10'

    - name: Test Task 2.2 impute_missing_data()
      id: test-task-2-2
      uses: etamu-class/autograding-command-grader@v10
      with:
        test-name: 'Test Task 2.2'
        setup-command: ''
        command: 'python -m twisted.trial test_assg_tasks.test_task2_impute_missing_data'
        timeout: '10'
        max-score: '10'

    - name: Test Task 2.3 sklearn_logistic_regression()
      id: test-task-2-3
      uses: etamu-class/autograding-command-grader@v10
      with:
        test-name: 'Test Task 2.3'
        setup-command: ''
        command: 'python -m twisted.trial test_assg_tasks.test_task2_sklearn_logistic_regression'
        timeout: '10'
        max-score: '10'

    - name: Test Task 2.4 statsmodel_logistic_regression()
      id: test-task-2-4
      uses: etamu-class/autograding-command-grader@v10
      with:
        test-name: 'Test Task 2.4'
        setup-command: ''
        command: 'python -m twisted.trial test_assg_tasks.test_task2_statsmodel_logistic_regression'
        timeout: '10'
        max-score: '10'

    - name: Autograding Reporter
      uses: education/autograding-grading-reporter@v1
      env:
        TEST-ASSIGNMENT-NOTEBOOK_RESULTS: "${{steps.test-assignment-notebook.outputs.result}}"
        TEST-TASK-1-1_RESULTS: "${{steps.test-task-1-1.outputs.result}}"
        TEST-TASK-1-2_RESULTS: "${{steps.test-task-1-2.outputs.result}}"
        TEST-TASK-2-1_RESULTS: "${{steps.test-task-2-1.outputs.result}}"
        TEST-TASK-2-2_RESULTS: "${{steps.test-task-2-2.outputs.result}}"
        TEST-TASK-2-3_RESULTS: "${{steps.test-task-2-3.outputs.result}}"
        TEST-TASK-2-4_RESULTS: "${{steps.test-task-2-4.outputs.result}}"
      with:
        runners: test-assignment-notebook,test-task-1-1,test-task-1-2,test-task-2-1,test-task-2-2,test-task-2-3,test-task-2-4

